<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mtcw="clr-namespace:Microsoft.TeamFoundation.Controls.WPF;assembly=Microsoft.TeamFoundation.Controls"
                    xmlns:mvvm="clr-namespace:Microsoft.TeamFoundation.MVVM;assembly=Microsoft.TeamFoundation.Controls"
                    xmlns:converters="clr-namespace:Microsoft.TeamFoundation.Controls.WPF.Converters;assembly=Microsoft.TeamFoundation.Controls"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:vm="clr-namespace:VsTrello.ViewModels"
                    xmlns:ui="clr-namespace:VsTrello.UI"
                    xmlns:mx="clr-namespace:Markdown.Xaml"
                    xmlns:mt="clr-namespace:Manatee.Trello;assembly=Manatee.Trello"
                    xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/VsTrello;component/Resources/VisualStudioStyles.xaml" />
        <ResourceDictionary Source="/VsTrello;component/Markdown/Markdown.Demo.Styles.Default.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <ui:TrelloColorConverter x:Key="TrelloColorConverter"/>
    <ui:AttachmentToImageConverter x:Key="AttachmentToImageConverter"/>
    <ui:CheckListCompletionConverter x:Key="CheckListCompletionConverter"/>
    <ui:CheckItemStateToBoolConverter x:Key="CheckItemStateToBoolConverter"/>
    <Style x:Key="CheckboxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource BodyTextBrushKey}"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="VSStyledComboBox" BasedOn="{StaticResource VsComboBoxStyleKey}" TargetType="{x:Type ComboBox}" />
    
    <Style x:Key="TitleText" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="TextDecorations" Value="Underline"/>
    </Style>

    <Style TargetType="Button" x:Key="FlatButtonStyle">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="1" BorderBrush="{DynamicResource ButtonBorderBrushKey}"
                                            Background="{TemplateBinding Background}"
                                            CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger x:Uid="TEButton_Trigger1" Property="UIElement.IsKeyboardFocused" Value="true">
                <Setter x:Uid="TEButton_Trigger4_1" Property="Control.Background"
                Value="{StaticResource ButtonHoverBackgroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_2" Property="Control.Foreground"
                Value="{StaticResource ButtonHoverForegroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_3" Property="Control.BorderBrush"
                Value="{StaticResource ButtonHoverBorderBrushKey}"/>
            </Trigger>
            <Trigger x:Uid="TEButton_Trigger2" Property="UIElement.IsMouseOver" Value="true">
                <Setter x:Uid="TEButton_Trigger4_1" Property="Control.Background"
                Value="{StaticResource ButtonHoverBackgroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_2" Property="Control.Foreground"
                Value="{StaticResource ButtonHoverForegroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_3" Property="Control.BorderBrush"
                Value="{StaticResource ButtonHoverBorderBrushKey}"/>
            </Trigger>
            <Trigger x:Uid="TEButton_Trigger3" Property="Button.IsDefaulted" Value="true">
                <Setter x:Uid="TEButton_Trigger4_1" Property="Control.Background"
                Value="{StaticResource ButtonBackgroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_2" Property="Control.Foreground"
                Value="{StaticResource ButtonForegroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_3" Property="Control.BorderBrush"
                Value="{StaticResource ButtonBorderBrushKey}"/>
            </Trigger>
            <Trigger x:Uid="TEButton_Trigger4" Property="ButtonBase.IsPressed" Value="true">
                <Setter x:Uid="TEButton_Trigger4_1" Property="Control.Background"
                Value="{StaticResource ButtonPressedBackgroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_2" Property="Control.Foreground"
                Value="{StaticResource ButtonPressedForegroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_3" Property="Control.BorderBrush"
                Value="{StaticResource ButtonPressedBorderBrushKey}"/>
            </Trigger>
            <Trigger x:Uid="TEButton_Trigger5" Property="UIElement.IsEnabled" Value="false">
                <Setter x:Uid="TEButton_Trigger4_1" Property="Control.Background"
                Value="{StaticResource ButtonDisabledBackgroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_2" Property="Control.Foreground"
                Value="{StaticResource ButtonDisabledForegroundBrushKey}"/>
                <Setter x:Uid="TEButton_Trigger4_3" Property="Control.BorderBrush"
                Value="{StaticResource ButtonDisabledBorderBrushKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <mx:Markdown x:Key="Markdown"
                        DocumentStyle="{StaticResource DocumentStyle}"
                        Heading1Style="{StaticResource H1Style}"
                        Heading2Style="{StaticResource H2Style}"
                        Heading3Style="{StaticResource H3Style}"
                        Heading4Style="{StaticResource H4Style}"
                        LinkStyle="{StaticResource LinkStyle}"
                        ImageStyle="{StaticResource ImageStyle}"
                        SeparatorStyle="{StaticResource SeparatorStyle}"/>
    <mx:TextToFlowDocumentConverter x:Key="TextToFlowDocumentConverter" Markdown="{StaticResource Markdown}"/>
    
    <DataTemplate DataType="{x:Type vm:CommentAction}">
        <StackPanel>
            <Border BorderThickness="1"  Margin="0,0,0,7" BorderBrush="{DynamicResource SubduedBorderBrushKey}" CornerRadius="6" Padding="2" HorizontalAlignment="Stretch">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Image x:Name="Avatar" Grid.Row="0" Grid.Column="0" Height="24" Width="24" Margin="5,0,5,0" Source="{Binding MemberImage}" />
                    <Border x:Name="AltAvatar" CornerRadius="3" BorderThickness="1" Background="Gray" Height="24" Width="24" Visibility="Collapsed" Margin="5,0,5,0">
                        <TextBlock Text="{Binding Initials}"  Foreground="Black" HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="12"/>
                    </Border>
                    <TextBlock Grid.Row="0" Grid.Column="1"  Text="{Binding Creator}" FontWeight="Bold"/>
                    <ui:MarkdownControl Document="{Binding Text, Converter={StaticResource TextToFlowDocumentConverter}}" Background="Transparent" Grid.Column="1" Grid.Row="1"/>
                    <TextBlock Grid.Row="2" Grid.Column="1" Margin="0,10,0,0" Text="{Binding Date }"/>
                </Grid>
            </Border>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding MemberImage}" Value="{x:Null}">
                <Setter TargetName="Avatar" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="AltAvatar" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:AttachmentAction}">
        <Border BorderThickness="1"  Margin="0,0,0,7" BorderBrush="{DynamicResource SubduedBorderBrushKey}" CornerRadius="6" Padding="2">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Image x:Name="Avatar" Grid.Column="0" Grid.Row="0"  Height="24" Width="24" Margin="5,0,5,0" Source="{Binding MemberImage}" />
                <Border x:Name="AltAvatar" Grid.Row="0"  CornerRadius="3" BorderThickness="1" Background="Gray" Height="24" Width="24" Visibility="Collapsed" Margin="5,0,5,0">
                    <TextBlock  Text="{Binding Initials}" Foreground="Black" HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="12"/>
                </Border>
                <TextBlock Grid.Column="1" Grid.Row="0" Text="{Binding Creator}"  FontWeight="Bold"  />
                <TextBlock Grid.Column="2" Grid.Row="0" Text="{Binding Text }"    Margin="5,0,5,0"/>
                <Image x:Name="attachmentImage" Grid.Row="1" Grid.ColumnSpan="4" Grid.Column="0" Margin="5,5,10,5" RenderOptions.BitmapScalingMode="Fant" Stretch="None" HorizontalAlignment="Center" Source="{Binding ImageAttachment, Converter={StaticResource AttachmentToImageConverter},diag:PresentationTraceSources.TraceLevel=High}"/>
                <TextBlock Grid.Column="3" Grid.Row="2" Text="{Binding Date}" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:SimpleAction}">
        <Border BorderThickness="1"  Margin="0,0,0,7" BorderBrush="{DynamicResource SubduedBorderBrushKey}" CornerRadius="6" Padding="2">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Image x:Name="Avatar" Grid.Column="0" Height="24" Width="24" Margin="5,0,5,0" Source="{Binding MemberImage}" />
                <Border x:Name="AltAvatar" CornerRadius="3" BorderThickness="1" Background="Gray" Height="24" Width="24" Visibility="Collapsed" Margin="5,0,5,0">
                    <TextBlock  Text="{Binding Initials}" Foreground="Black" HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="12"/>
                </Border>
                <TextBlock Grid.Column="1" Text="{Binding Creator}"  FontWeight="Bold"  />
                <TextBlock Grid.Column="2" Text="{Binding Text }"    Margin="5,0,5,0"/>
                <TextBlock Grid.Column="3" Text="{Binding Date}" />
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding MemberImage}" Value="{x:Null}">
                <Setter TargetName="Avatar" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="AltAvatar" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type mt:Member}">
        <StackPanel>
            <Image x:Name="Avatar" Height="30" Width="30" Margin="1" Source="{Binding AvatarUrl}"/>
            <Border x:Name="AltAvatar" CornerRadius="3" BorderThickness="1" Background="Gray" Height="30" Width="30" Visibility="Collapsed" Margin="1" >
                <TextBlock   Text="{Binding Initials}"  Foreground="Black" HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="13"/>
            </Border>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding AvatarUrl}" Value="{x:Null}">
                <Setter TargetName="Avatar" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="AltAvatar" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type mt:Label}">
        <Border Background="{Binding Color, Converter={StaticResource TrelloColorConverter}}" CornerRadius="5" Margin="3">
            <TextBlock Margin="5" MinWidth="75" Text="{Binding Name}" Background="{Binding Color, Converter={StaticResource TrelloColorConverter}}" Foreground="White" FontWeight="Bold" TextAlignment="Center" TextTrimming="CharacterEllipsis"/>
        </Border>
    </DataTemplate>

    <DataTemplate DataType="{x:Type mt:CheckItem}">
        <CheckBox x:Name="checkBox" IsEnabled="False">
            <!--<ui:MarkdownControl Document="{Binding Name, Converter={StaticResource TextToFlowDocumentConverter}}" Background="Transparent"/>-->
            <TextBlock x:Name="text" Text="{Binding Name}"/>
        </CheckBox>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding State, Converter={StaticResource CheckItemStateToBoolConverter}}" Value="True">
                <Setter TargetName="checkBox" Property="IsChecked" Value="True" />
                <Setter TargetName="text" Property="TextDecorations" Value="StrikeThrough" />
                <Setter TargetName="text" Property="FontStyle" Value="Italic" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    
    <DataTemplate DataType="{ x:Type mt:CheckList}">
        <Grid Margin="5,5,5,15">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="0" Text="{Binding Name}"/>
            <Grid Grid.Row="1" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0" TextAlignment="Center" Margin="0,0,2,0"  Text="{Binding CheckItems, Mode=OneWay, Converter={StaticResource CheckListCompletionConverter},  StringFormat={}{0:0}%}"/>
                <Border Grid.Column="1">
                    <ProgressBar Minimum="0" Maximum="100" Height="5" VerticalAlignment="Center" HorizontalAlignment="Stretch" Value="{Binding CheckItems, Mode=OneWay, Converter={StaticResource CheckListCompletionConverter}}"/>
                </Border>
            </Grid>
            <ItemsControl Grid.Row="2" ItemsSource="{Binding CheckItems, Mode=OneWay}"/>
        </Grid>
    </DataTemplate>
    
    <Style x:Key="WrapList" TargetType="ItemsControl">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate >
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="FlatListViewGridLineBrush" Color="{DynamicResource VsColor.GridLine}"/>
    <SolidColorBrush x:Key="FlatListViewHighlightBackgroundBrush" Color="{DynamicResource VsColor.Highlight}"/>
    <SolidColorBrush x:Key="FlatListViewHighlightForegroundBrush" Color="White"/>
    <SolidColorBrush x:Key="FlatListViewHoverBrush" Color="{DynamicResource VsColor.InactiveBorder}"/>

    <Style x:Key="FlatListViewItemStyle" TargetType="ListViewItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Name="Border" Background="Transparent" Padding="2">
                        <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource FlatListViewHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TextBlock.Foreground" TargetName="Border" Value="{StaticResource FlatListViewHighlightForegroundBrush}"/>
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource FlatListViewHighlightBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlatGridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-9"/>
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="{StaticResource FlatListViewGridLineBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                        <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Center" Width="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlatGridViewColumnHeader" TargetType="GridViewColumnHeader">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SubduedTextBrushKey}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid SnapsToDevicePixels="True">
                        <Border Name="HeaderBorder"
                                BorderThickness="0,0,0,1"
                                BorderBrush="{StaticResource FlatListViewGridLineBrush}"
                                Background="Transparent">
                            <TextBlock x:Name="ContentHeader" Margin="6,1,0,0" Text="{TemplateBinding Content}" Width="{TemplateBinding Width}" TextAlignment="Left" />
                        </Border>
                        <Canvas>
                            <Thumb Name="PART_HeaderGripper" Style="{StaticResource FlatGridViewColumnHeaderGripper}"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="{StaticResource FlatListViewHoverBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role" Value="Padding">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Border x:Name="HeaderBorder" BorderBrush="{StaticResource FlatListViewGridLineBrush}" BorderThickness="0,1,0,1" Background="{TemplateBinding Background}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Height" Value="Auto">
                                    <Setter Property="MinHeight" Value="20"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
